name: Release Drafter

on:
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get closed issues
        id: getIssues
        uses: actions/github-script@v6
        with:
          script: |
            const owner = "${{ github.repository_owner	 }}";
            const repo = "${{ github.repository }}".split('/')[1];
            const { data: sinceRef } = await github.rest.git.getTree({
              owner,
              repo,
              tree_sha: 'main'
            });
            const { data: sinceCommit } = await github.rest.git.getCommit({
              owner,
              repo,
              commit_sha: sinceRef.sha
            });
            const { data: latestRef } = await github.rest.git.getTree({
              owner,
              repo,
              tree_sha: '${{ github.sha }}'
            });
            const { data: latestCommit } = await github.rest.git.getCommit({
              owner,
              repo,
              commit_sha: latestRef.sha
            });

            const {data: closedIssues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'closed',
              since: sinceCommit.author.date,
              per_page: 100
            });

            const issueBody = closedIssues.map((item) => `# ${item.number} ${item.title}`).join('\n');

            const fs = require('fs');
            const template = fs.readFileSync('.github/release-drafter.template.yml', 'utf8');
            const latest = template.replace('CLOSED_ISSUES', issueBody);
            fs.writeFileSync('.github/release-drafter.yml', latest);

      - run: |
          tmp=$(cat .github/release-drafter.yml)
          replaced="${tmp//$'CLOSED_ISSUES'/$CLOSED_ISSUES"
          echo $replaced > .github/release-drafter.yml
        env:
          CLOSED_ISSUES: ${{ steps.getIssues.outputs.closedIssues }}}

      - uses: release-drafter/release-drafter@v5
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup release pr
        id: setup
        uses: actions/github-script@v6
        with: 
          script: |
            const body = `
            ${{steps.create-release.outputs.body}}
            ## Refs
            - [Draft Release PR](${{steps.create-release.outputs.html_url}})

            <!-- draft_release_id=${{ steps.create-release.outputs.id }} -->`;

            core.setOutput('RELEASE_PR_BODY', body);
      - name: Rebase release branch
        run: |
          git checkout -b release/next origin/develop
          git push -f -u origin release/next
      - name: Create release pr for main
        uses: actions/github-script@v6
        env:
          RELEASE_ID: ${{steps.create-release.outputs.tag_name}}
          BRANCH: release/next
          BODY: ${{ steps.setup.outputs.RELEASE_PR_BODY }}
        with:
          script: |
            const { data: existReleasePrs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${process.env.BRANCH}`,
              base: 'main'
            });

            if ( existReleasePrs.length === 0 ) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${process.env.RELEASE_ID}`,
                body: `${process.env.BODY}`,
                head: `${process.env.BRANCH}`,
                base: 'main',
                maintainer_can_modify: true,
              })
            } else {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: existReleasePrs[0].number,
                title: `Release ${process.env.RELEASE_ID}`,
                body: `${process.env.BODY}`,
              })
            }
        # CHANGELOGをdevelop反映するPRはリリースPRマージ後にPR作成し、auto-mergeさせる
 
name: Release Drafter

on:
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: release-drafter/release-drafter@v5
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup release pr
        id: setup
        uses: actions/github-script@v6
        with: 
          script: |
            const body = `
            ${{steps.create-release.outputs.body}}
            ## Refs
            - [Draft Release PR](${{steps.create-release.outputs.html_url}})

            <!-- draft_release_id=${{ steps.create-release.outputs.id }} -->`;

            core.setOutput('RELEASE_PR_BODY', body);
      - name: Append CHANGELOG file
        run: |
          echo "${{ steps.setup.outputs.RELEASE_PR_BODY }}" >> CHANGELOG.md

          git config --local user.email "release-pr-bot@progrit.co.jp"
          git config --local user.name "release-pr-bot"
          git checkout -b release/next

          git add CHANGELOG.md
          git commit -m 'chore: Generate CHANGELOG.md'

          git push -f -u origin release/next

      - name: Create release pr for main
        uses: actions/github-script@v6
        env:
          RELEASE_ID: ${{steps.create-release.outputs.tag_name}}
          BRANCH: release/next
          BODY: ${{ steps.setup.outputs.RELEASE_PR_BODY }}
        with:
          script: |
            const { data: existReleasePrs } = await github.rest.pulls({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${process.env.BRANCH}`,
              base: 'main'
            });

            if ( existReleasePrs.length === 0 ) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${process.env.RELEASE_ID}`,
                body: `${process.env.BODY}`,
                head: `${process.env.BRANCH}`,
                base: 'main',
                maintainer_can_modify: true,
                draft: true
              })
            } else {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${process.env.RELEASE_ID}`,
                body: `${process.env.BODY}`,
              })
            }
        # CHANGELOGをdevelop反映するPRはリリースPRマージ後にPR作成し、auto-mergeさせる
